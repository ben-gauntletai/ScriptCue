rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidScript() {
      let data = request.resource.data;
      return data.title is string 
        && data.userId == request.auth.uid;
    }

    function isValidInitialUpload() {
      let data = request.resource.data;
      return data.title is string 
        && data.userId == request.auth.uid
        && (data.uploadStatus == 'uploading' || !data.uploadStatus);
    }

    function isValidUploadUpdate() {
      let data = request.resource.data;
      return data.userId == request.auth.uid
        && (
          !data.uploadStatus 
          || data.uploadStatus in ['uploading', 'processing', 'completed', 'error']
        );
    }

    match /scripts/{scriptId} {
      allow read, write: if isAuthenticated();
      
      match /settings/{settingId} {
        allow read, write: if isAuthenticated() 
          && exists(/databases/$(database)/documents/scripts/$(scriptId))
          && get(/databases/$(database)/documents/scripts/$(scriptId)).data.userId == request.auth.uid;
      }

      match /voiceLines/{docId} {
        allow read, write: if isAuthenticated() 
          && exists(/databases/$(database)/documents/scripts/$(scriptId))
          && get(/databases/$(database)/documents/scripts/$(scriptId)).data.userId == request.auth.uid;
      }
    }

    match /scriptProcessing/{scriptId} {
      allow read, write: if isAuthenticated();
    }

    match /scriptAnalysis/{scriptId} {
      allow read, write: if isAuthenticated();
    }

    match /sessions/{sessionId} {
      allow read, write: if isAuthenticated();
    }
  }
} 